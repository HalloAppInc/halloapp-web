syntax = "proto3";

package web;

option java_package = "com.halloapp.proto.web";
option java_multiple_files = true;

import "server.proto";

message WebContainer {
  oneof payload {
    FeedRequest feed_request = 1;
    FeedResponse feed_response = 2;
    FeedUpdate feed_update = 3;
    GroupRequest group_request = 4;
    GroupResponse group_response = 5;
    PrivacyListRequest privacy_list_request = 6;
    PrivacyListResponse privacy_list_response = 7;
    ReceiptUpdate receipt_update = 8;
    MomentStatus moment_status = 9;
  }
}

// ConnectionInfo is included as message payload during Noise handshake.
message ConnectionInfo {
  string version = 1;
  UserDisplayInfo user = 2;
  MomentStatus moment_status = 3;
}

message ReceiptInfo {
  enum Status {
    DELIVERED = 0;
    SEEN = 1;
    PLAYED = 2;
  }
  int64 uid = 1;
  Status status = 2;
  int64 timestamp = 3;
}

message UserDisplayInfo {
  int64 uid = 1;
  string contact_name = 2;
  string avatar_id = 3;
}

message GroupDisplayInfo {
  enum MembershipStatus {
    UNKNOWN = 0;
    NOT_MEMBER = 1;
    MEMBER = 2;
    ADMIN = 3;
  }
  string id = 1;
  string name = 2;
  string avatar_id = 3;
  string description = 4;
  string background = 5;
  server.ExpiryInfo expiry_info = 6;
  MembershipStatus membership_status = 7;
}

message PostDisplayInfo {
  enum SeenState {
    UNSEEN = 0;
    SEEN = 1;
    SEEN_SENDING = 2;
  }
  enum TransferState {
    UNKNOWN = 0;
    RECEIVED = 1;
    SENT = 2;
    SENDING = 3;
    SEND_ERROR = 4;
    DECRYPTION_ERROR = 5;
  }
  enum RetractState {
    UNRETRACTED = 0;
    RETRACTING = 1;
    RETRACTED = 2;
  }
  string id = 1;
  TransferState transferState = 2;
  SeenState seenState = 3;
  RetractState retractState = 4;
  bool is_unsupported = 5;
  int32 unread_comments = 6;
  repeated ReceiptInfo user_receipts = 7;
}

enum FeedType {
  HOME = 0;
  GROUP = 1;
  POST_COMMENTS = 2;
  MOMENTS = 3;
}

message FeedRequest {
  string id = 1;
  FeedType type = 2;
  string cursor = 3; // opaque to web client
  int32 limit = 4;
  string content_id = 5; // may be group id or post id depending on feed type
}

message FeedResponse {
  enum Error {
    NONE = 0;
    INVALID_CURSOR = 1;
  }
  string id = 1;
  FeedType type = 2;
  repeated FeedItem items = 3;
  repeated UserDisplayInfo user_display_info = 4;
  repeated PostDisplayInfo post_display_info = 5;
  string next_cursor = 6;
  Error error = 7;
  repeated GroupDisplayInfo group_display_info = 8;
}

message FeedItem {
  oneof content {
    server.Post post = 1;
    server.Comment comment = 2;
  }
  string group_id = 3;
  int64 expiry_timestamp = 4; // Set only for post items. `-1` if item should never expire.
}

message FeedUpdate {
  repeated FeedItem items = 1;
  repeated UserDisplayInfo user_display_info = 2;
  repeated PostDisplayInfo post_display_info = 3;
  repeated GroupDisplayInfo group_display_info = 4;
}

message GroupRequest {
  string id = 1;
}

message GroupResponse {
  string id = 1;
  repeated GroupDisplayInfo groups = 2;
}

message PrivacyListRequest {
  string id = 1;
}

message PrivacyListResponse {
  string id = 1;
  server.PrivacyLists privacy_lists = 2;
}

message ReceiptUpdate {
  string id = 1;
  string content_id = 2;
  ReceiptInfo receipt = 3;
}

message MomentStatus {
  bool is_locked = 1;
  int64 expiry_timestamp = 2;
}
